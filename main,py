from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext, CallbackQueryHandler
import os
from config import BOT_TOKEN

CATEGORY, SUBCATEGORY, OTHER_SUBCATEGORY, CONFIRM_SUBCATEGORY, SIZE_KNOWN, LENGTH, WIDTH, GLASS, COLOR, OTHER_COLOR, CONFIRM_COLOR, VISUAL, SOURCE, OTHER_SOURCE, CONFIRM_SOURCE, COMPLETE = range(16)

ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx"}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    "–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞": ["–ö–∞—Å–∫–∞–¥–Ω–∞—è", "–†–∞—Å–ø–∞—à–Ω–∞—è", "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–∞—è", "–û—Ç–∫–∞—Ç–Ω–∞—è", "–ì–∞—Ä–º–æ—à–∫–∞", "–ë–µ–∑—Ä–∞–º–æ—á–Ω–∞—è"],
    "–ß–∞—à–∞": [],
    "–°—Ç–µ–ª–ª–∞–∂": [],
    "–ó–µ—Ä–∫–∞–ª–æ": []
}

GLASS_OPTIONS = ["–ú–∞—Ç–æ–≤–æ–µ", "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ", "–†–∏—Ñ–ª–µ–Ω–æ–µ", "–¢–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"]
COLOR_OPTIONS = ["–ó–æ–ª–æ—Ç–æ–π", "–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π"]
SOURCE_OPTIONS = ["–§–∞—Ä–ø–æ—Å—Ç", "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", "–î–∏–∑–∞–π–Ω–µ—Ä", "–ü–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]

# –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∏
PHOTOS = [
    {"path": "1.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞—Å–∫–∞–¥–Ω–∞—è"},
    {"path": "2.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞—Å–∫–∞–¥–Ω–∞—è"},
    {"path": "3.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞—Å–∫–∞–¥–Ω–∞—è"},
    {"path": "4.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞—Å–∫–∞–¥–Ω–∞—è"},
    {"path": "5.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ì–∞—Ä–º–æ—à–∫–∞"},
    {"path": "6.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ì–∞—Ä–º–æ—à–∫–∞"},
    {"path": "7.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ì–∞—Ä–º–æ—à–∫–∞"},
    {"path": "8.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –†–∞—Å–ø–∞—à–Ω–∞—è"},
    {"path": "9.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –†–∞—Å–ø–∞—à–Ω–∞—è"},
    {"path": "10.JPG", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û—Ç–∫–∞—Ç–Ω–∞—è"},
    {"path": "11.JPG", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û—Ç–∫–∞—Ç–Ω–∞—è"},
    {"path": "12.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û—Ç–∫–∞—Ç–Ω–∞—è"},
    {"path": "13.jpg", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û—Ç–∫–∞—Ç–Ω–∞—è"},
    {"path": "14.JPG", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ë–µ–∑—Ä–∞–º–æ—á–Ω–∞—è"},
    {"path": "15.JPG", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ë–µ–∑—Ä–∞–º–æ—á–Ω–∞—è"},
    {"path": "16.PNG", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–∞—è"},
    {"path": "17.JPG", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–∞—è"},
    {"path": "18.JPG", "caption": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–∞—è"}
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: CallbackContext):
    if update.message and update.message.text == "/start":
        welcome_text = (
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é. –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Svarka&Design. üåü\n\n"
            "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.\n\n"
            "‚ú® –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /menu\n"
            "- –ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç —Å–ª–æ–≤–æ \"–º–µ–Ω—é\"\n\n"
            "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –æ–ø—ã—Ç –ø—Ä–∏—è—Ç–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º! üòä"
        )
        await update.message.reply_text(welcome_text)

    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–∫–∞–∑ —Ä–∞—Å—á–µ—Ç–∞/–ö–ü", callback_data='order')],
        [InlineKeyboardButton("üñºÔ∏è –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='gallery')],
        [InlineKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='about')],
        [InlineKeyboardButton("üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback')],
        [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='status')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –û –∫–æ–º–ø–∞–Ω–∏–∏
async def about_company(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –¢–µ–∫—Å—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏
    about_text = (
        "üåü *–°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç!*\n\n"
        "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ:\n"
        "üîπ *–°—Ç–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫* ‚Äî –¥–ª—è –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å —ç—Å—Ç–µ—Ç–∏–∫–æ–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.\n"
        "üîπ *–ö–æ—Å—Ç—Ä–æ–≤—ã—Ö —á–∞—à* ‚Äî —Å–æ–∑–¥–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —É—é—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞ –∏–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.\n"
        "üîπ *–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∑–µ—Ä–∫–∞–ª* ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç–∏ –ª—é–±–æ–º—É –∏–Ω—Ç–µ—Ä—å–µ—Ä—É.\n"
        "üîπ *–õ–µ–µ—Ä–Ω—ã—Ö –æ–≥—Ä–∞–∂–¥–µ–Ω–∏–π –∏ –ª–µ—Å—Ç–Ω–∏—Ü* ‚Äî —Å–æ—á–µ—Ç–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.\n\n"
        "‚ú® *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?*\n"
        "‚úÖ *–ü–æ—Ä–æ—à–∫–æ–≤–æ-–ø–æ–ª–∏–º–µ—Ä–Ω–∞—è –ø–æ–∫—Ä–∞—Å–∫–∞* ‚Äî –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥.\n"
        "‚úÖ *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥* ‚Äî –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π.\n"
        "‚úÖ *–û–ø—ã—Ç –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è* ‚Äî 7 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞, —Å–æ—Ç–Ω–∏ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
        "üèÜ *–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã –≥–æ–≤–æ—Ä—è—Ç –∑–∞ –Ω–∞—Å:*\n"
        "–ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–µ–º, —á—Ç–æ –Ω–∞—à–∏ –∏–∑–¥–µ–ª–∏—è —É–∫—Ä–∞—à–∞—é—Ç —Ç–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã, –∫–∞–∫:\n"
        "‚Ä¢ Vladivostok International Airport\n"
        "‚Ä¢ UMAMI\n"
        "‚Ä¢ –ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –ö—Ä–∞—Å–æ—Ç—ã\n"
        "‚Ä¢ –ì–µ–æ–º–µ—Ç—Ä–∏—è —Ñ–∏—Ç–Ω–µ—Å–∞\n"
        "‚Ä¢ ZUMA\n"
        "‚Ä¢ CEDRA\n"
        "‚Ä¢ Vladivostok Design Week\n"
        "‚Ä¢ VVO Apartments Group\n\n"
        "üíé *Svarka&Design* ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –≤–æ–ø–ª–æ—â–µ–Ω–Ω–æ–µ –≤ –º–µ—Ç–∞–ª–ª–µ.\n"
        "–î–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç, –∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º —Ç–æ, —á—Ç–æ —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–µ–π –≥–æ—Ä–¥–æ—Å—Ç—å—é!\n"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        about_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    )

# –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
current_photo_index = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
async def gallery(update: Update, context: CallbackContext):
    global current_photo_index
    current_photo_index = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥–∞–ª–µ—Ä–µ—é
    await show_photo(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def show_photo(update: Update, context: CallbackContext):
    global current_photo_index
    photo = PHOTOS[current_photo_index]

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_photo'),
            InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='next_photo')
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    if 'photo_message_id' in context.user_data:
        try:
            await context.bot.edit_message_media(
                chat_id=update.callback_query.message.chat_id,
                message_id=context.user_data['photo_message_id'],
                media=InputMediaPhoto(media=open(photo['path'], 'rb'), caption=photo['caption']),
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        message = await update.callback_query.message.reply_photo(
            photo=open(photo['path'], 'rb'),  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
            caption=photo['caption'],
            reply_markup=reply_markup
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        context.user_data['photo_message_id'] = message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
async def handle_photo_navigation(update: Update, context: CallbackContext):
    global current_photo_index
    query = update.callback_query
    await query.answer()

    if query.data == 'next_photo':
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        current_photo_index += 1
        if current_photo_index >= len(PHOTOS):
            current_photo_index = 0  # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    elif query.data == 'prev_photo':
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        current_photo_index -= 1
        if current_photo_index < 0:
            current_photo_index = len(PHOTOS) - 1  # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    elif query.data == 'back_to_main':
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        if 'photo_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=context.user_data['photo_message_id']
                )
                del context.user_data['photo_message_id']  # –£–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        current_photo_index = 0

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –ó–∞–∫–∞–∑ —Ä–∞—Å—á–µ—Ç–∞/–ö–ü", callback_data='order')],
            [InlineKeyboardButton("üñºÔ∏è –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='gallery')],
            [InlineKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='about')],
            [InlineKeyboardButton("üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback')],
            [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='status')]
        ]))
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    await show_photo(update, context)

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
async def feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –¢–µ–∫—Å—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    feedback_text = (
        "üìû *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!*\n\n"
        "üîó *WhatsApp:* [+7 914 728 18 18](https://wa.me/79147281818)\n"
        "üì∏ *Instagram:* [@svarkavl](https://www.instagram.com/svarkavl)\n"
        "üåê *–°–∞–π—Ç:* [svarka25.ru](https://svarka25.ru/)\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º! üòä"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        feedback_text,
        reply_markup=reply_markup,
        parse_mode="Markdown",  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        disable_web_page_preview=False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
    )

# –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
async def order_status(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:",
        reply_markup=reply_markup
    )

# FAQ
async def faq(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –¢–µ–∫—Å—Ç —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    faq_text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
        "1. *–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å?*\n"
        "‚Äî –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ó–∞–∫–∞–∑ –ö–ü¬ª, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –º—ã –≤—ã—à–ª–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –ö–ü. –î–∞–ª–µ–µ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
        "2. *–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?*\n"
        "‚Äî 35 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞.\n\n"
        "3. *–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?*\n"
        "‚Äî –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ö–ü –∏ –∑–∞–º–µ—Ä–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 70%. –î–æ–ø–ª–∞—Ç–∞ ‚Äî 30% –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å¬ª!"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        faq_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
async def main_menu_from_query(query):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–∫–∞–∑ —Ä–∞—Å—á–µ—Ç–∞/–ö–ü", callback_data='order')],
        [InlineKeyboardButton("üñºÔ∏è –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='gallery')],
        [InlineKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='about')],
        [InlineKeyboardButton("üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback')],
        [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='status')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ –ö–ü
async def start_order(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    keyboard = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES.keys()]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return CATEGORY

# –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def choose_subcategory(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    category = query.data

    if category == "back_to_main":
        await main_menu_from_query(query)
        return ConversationHandler.END

    if category not in CATEGORIES:
        return await start_order(update, context)

    context.user_data["category"] = category
    await query.answer()

    if CATEGORIES[category]:
        keyboard = [[InlineKeyboardButton(sub, callback_data=sub)] for sub in CATEGORIES[category]]
        keyboard.append([InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="other_subcategory")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
        return SUBCATEGORY
    else:
        context.user_data["subcategory"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        return await ask_size(update, context)

# –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def back_to_category(update: Update, context: CallbackContext) -> int:
    await start_order(update, context)
    return CATEGORY

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –∑–Ω–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º–µ—Ä
async def ask_size(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ callback_query
    if update.callback_query:
        query = update.callback_query
        if query.data == "back_to_category":
            return await back_to_category(update, context)

        context.user_data["subcategory"] = query.data
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data="yes"), InlineKeyboardButton("–ù–µ—Ç", callback_data="no")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Ä–∞–∑–º–µ—Ä?", reply_markup=reply_markup)
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    elif update.message:
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data="yes"), InlineKeyboardButton("–ù–µ—Ç", callback_data="no")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Ä–∞–∑–º–µ—Ä?", reply_markup=reply_markup)

    return SIZE_KNOWN

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if 'photo_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data['photo_message_id']
            )
            del context.user_data['photo_message_id']  # –£–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await main_menu_from_query(query)
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu(update, context)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–∑–º–µ—Ä–µ
async def handle_size_known(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "yes":
        return await ask_length(update, context)
    elif query.data == "no":
        context.user_data["length"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        context.user_data["width"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        return await ask_glass(update, context)
    elif query.data == "back_to_category":
        return await back_to_category(update, context)

# –ï—Å–ª–∏ –∑–Ω–∞–µ—Ç —Ä–∞–∑–º–µ—Ä, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
async def ask_length(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    context.user_data["length_input"] = ""

    keyboard = generate_number_keyboard("length")
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_size_known")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É (–º) —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", reply_markup=reply_markup)
    return LENGTH

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥" –≤ –≤—ã–±–æ—Ä–µ –¥–ª–∏–Ω—ã
async def back_to_size_known(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    return await ask_size(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω—ã
async def handle_length_input(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    action = data[1]

    if action.isdigit():
        context.user_data["length_input"] += action
    elif action == "dot":
        if "." not in context.user_data["length_input"]:
            context.user_data["length_input"] += "."
    elif action == "clear":
        context.user_data["length_input"] = ""
    elif action == "done":
        if not context.user_data["length_input"] or context.user_data["length_input"] == ".":
            await query.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!", show_alert=True)
            return LENGTH
        context.user_data["length"] = context.user_data["length_input"]
        return await ask_width(update, context)

    keyboard = generate_number_keyboard("length", allow_dot="." not in context.user_data["length_input"])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_size_known")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É (–º): {context.user_data['length_input']}", reply_markup=reply_markup)
    return LENGTH

def generate_number_keyboard(prefix: str, allow_dot: bool = True):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–∏—Ñ—Ä–∞–º–∏, —Ç–æ—á–∫–æ–π –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("1", callback_data=f"{prefix}_1"),
         InlineKeyboardButton("2", callback_data=f"{prefix}_2"),
         InlineKeyboardButton("3", callback_data=f"{prefix}_3")],
        [InlineKeyboardButton("4", callback_data=f"{prefix}_4"),
         InlineKeyboardButton("5", callback_data=f"{prefix}_5"),
         InlineKeyboardButton("6", callback_data=f"{prefix}_6")],
        [InlineKeyboardButton("7", callback_data=f"{prefix}_7"),
         InlineKeyboardButton("8", callback_data=f"{prefix}_8"),
         InlineKeyboardButton("9", callback_data=f"{prefix}_9")],
        [InlineKeyboardButton("0", callback_data=f"{prefix}_0"),
         InlineKeyboardButton("‚¨ÖÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data=f"{prefix}_clear")]
    ]

    if allow_dot:
        keyboard[3].insert(1, InlineKeyboardButton(".", callback_data=f"{prefix}_dot"))

    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}_done")])

    return keyboard

# –ó–∞–ø—Ä–æ—Å —à–∏—Ä–∏–Ω—ã
async def ask_width(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    context.user_data["width_input"] = ""

    keyboard = generate_number_keyboard("width")
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_length")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É (–º) —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", reply_markup=reply_markup)
    return WIDTH

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥" –≤ –≤—ã–±–æ—Ä–µ —à–∏—Ä–∏–Ω—ã
async def back_to_length(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    return await ask_length(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∏—Ä–∏–Ω—ã
async def handle_width_input(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    action = data[1]

    if action.isdigit():
        context.user_data["width_input"] += action
    elif action == "dot":
        if "." not in context.user_data["width_input"]:
            context.user_data["width_input"] += "."
    elif action == "clear":
        context.user_data["width_input"] = ""
    elif action == "done":
        if not context.user_data["width_input"] or context.user_data["width_input"] == ".":
            await query.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!", show_alert=True)
            return WIDTH
        context.user_data["width"] = context.user_data["width_input"]
        return await ask_glass(update, context)

    keyboard = generate_number_keyboard("width", allow_dot="." not in context.user_data["width_input"])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_length")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É (–º): {context.user_data['width_input']}", reply_markup=reply_markup)
    return WIDTH

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–µ–∫–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞"
async def ask_glass(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞"
    if context.user_data.get("category") != "–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞":
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ "–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–µ–∫–ª–∞
        context.user_data["glass"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        return await ask_color(update, context)

    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in GLASS_OPTIONS]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_size_known")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–ö–∞–∫–æ–µ —Å—Ç–µ–∫–ª–æ —Ö–æ—Ç–∏—Ç–µ?", reply_markup=reply_markup)
    return GLASS

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç
async def ask_color(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    context.user_data["glass"] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–µ–∫–ª–æ
    await query.answer()

    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in COLOR_OPTIONS]
    keyboard.append([InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="other_color")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_glass")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=reply_markup)
    return COLOR

async def handle_color_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    context.user_data["color"] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç
    await query.answer()
    return await ask_visual(update, context)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥" –≤ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞
async def back_to_glass(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    return await ask_glass(update, context)

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
async def ask_visual(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–æ –ª–∏ —á–µ—Ä–µ–∑ callback_query –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload")],
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_color")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è? üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=reply_markup
        )
    elif update.message:
        keyboard = [
            [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload")],
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_color")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è? üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=reply_markup
        )

    return VISUAL


async def handle_visual_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "upload":
        await query.edit_message_text("üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: *.jpg, *.jpeg, *.png, *.pdf, *.doc, *.docx).")
        return VISUAL
    else:
        if "visuals" not in context.user_data or not context.user_data["visuals"]:
            context.user_data["visuals"] = ["–ë–µ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"]

        return await ask_source(update, context)

async def upload_visual(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç."""
    document = update.message.document
    photo = update.message.photo[-1] if update.message.photo else None

    if photo:
        file_id = photo.file_id
        file_info = await context.bot.get_file(file_id)
        file_name = f"{file_id}.jpg"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ JPG
    elif document:
        file_id = document.file_id
        file_name = document.file_name
        file_extension = os.path.splitext(file_name)[1].lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if file_extension not in ALLOWED_EXTENSIONS:
            await update.message.reply_text(
                "‚õî –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (.jpg, .jpeg, .png, .gif) –∏ PDF."
            )
            return VISUAL

        file_info = await context.bot.get_file(file_id)
    else:
        await update.message.reply_text("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return VISUAL

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    save_path = os.path.join("visuals", file_name)  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    os.makedirs("visuals", exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    try:
        await file_info.download_to_drive(save_path)
    except Exception as e:
        await update.message.reply_text(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return VISUAL

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if "visuals" not in context.user_data:
        context.user_data["visuals"] = []
    context.user_data["visuals"].append(save_path)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="upload")],
        [InlineKeyboardButton("‚è≠ –î–∞–ª—å—à–µ", callback_data="next")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return VISUAL


async def finish_visual(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤."""
    query = update.callback_query
    await query.answer()
    return await ask_source(update, context)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
async def ask_source(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in SOURCE_OPTIONS]
    keyboard.append([InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="other_source")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_visual")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", reply_markup=reply_markup)
    return SOURCE

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
async def back_to_visual(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    return await ask_visual(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥" –≤ –≤—ã–±–æ—Ä–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
async def back_to_color(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    return await ask_color(update, context)

async def handle_other_subcategory(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    return OTHER_SUBCATEGORY  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def save_other_subcategory(update: Update, context: CallbackContext) -> int:
    if update.message:
        user_input = update.message.text
        context.user_data["subcategory"] = user_input

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
        if context.user_data.get("rewrite_subcategory"):
            del context.user_data["rewrite_subcategory"]  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
            await update.message.reply_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            return await ask_size(update, context)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            keyboard = [
                [InlineKeyboardButton("–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data="rewrite_subcategory")],
                [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_subcategory")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{user_input}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
                reply_markup=reply_markup
            )
            return CONFIRM_SUBCATEGORY  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

async def handle_confirm_subcategory(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "rewrite_subcategory":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        context.user_data["rewrite_subcategory"] = True
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        return OTHER_SUBCATEGORY
    elif query.data == "confirm_subcategory":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await query.edit_message_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
        return await ask_size(update, context)


async def handle_other_color(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç:")
    return OTHER_COLOR

async def save_other_color(update: Update, context: CallbackContext) -> int:
    if update.message:
        user_input = update.message.text
        context.user_data["color"] = user_input

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
        if context.user_data.get("rewrite_color"):
            del context.user_data["rewrite_color"]  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
            await update.message.reply_text("–¶–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
            return await ask_visual(update, context)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            keyboard = [
                [InlineKeyboardButton("–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data="rewrite_color")],
                [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_color")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–¶–≤–µ—Ç '{user_input}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
                reply_markup=reply_markup
            )
            return CONFIRM_COLOR  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

async def handle_confirm_color(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "rewrite_color":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        context.user_data["rewrite_color"] = True
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç:")
        return OTHER_COLOR
    elif query.data == "confirm_color":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await query.edit_message_text("–¶–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
        return await ask_visual(update, context)



async def handle_other_source(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å:")
    return OTHER_SOURCE

async def save_other_source(update: Update, context: CallbackContext) -> int:
    if update.message:
        user_input = update.message.text
        context.user_data["source"] = user_input

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
        if context.user_data.get("rewrite_source"):
            del context.user_data["rewrite_source"]  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
            await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
            return await complete_order(update, context)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            keyboard = [
                [InlineKeyboardButton("–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data="rewrite_source")],
                [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_source")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{user_input}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
                reply_markup=reply_markup
            )
            return CONFIRM_SOURCE

async def handle_confirm_source(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "rewrite_source":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ
        context.user_data["rewrite_source"] = True
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:")
        return OTHER_SOURCE
    elif query.data == "confirm_source":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await query.edit_message_text("–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
        return await complete_order(update, context)


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é complete_order –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
async def complete_order(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ callback_query –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        context.user_data["source"] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ callback
    elif update.message:
        context.user_data["source"] = context.user_data.get("source", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ë–µ—Ä–µ–º –∏–∑ user_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    visuals = context.user_data.get("visuals", [])
    visuals_list = "\n".join(visuals) if visuals else "–ë–µ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "–ù–µ —É–∫–∞–∑–∞–Ω–æ" –¥–ª—è —Å—Ç–µ–∫–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ "no"
    glass = context.user_data.get("glass", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    if glass.lower() == "no":
        glass = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Ç–æ–≥–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
    order_summary = "\n".join([
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"–î–ª–∏–Ω–∞: {context.user_data.get('length', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"–®–∏—Ä–∏–Ω–∞: {context.user_data.get('width', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"–°—Ç–µ–∫–ª–æ: {glass}",
        f"–¶–≤–µ—Ç: {context.user_data.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {context.user_data.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:\n{visuals_list}"
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if visuals:
        for file_path in visuals:
            if os.path.exists(file_path):
                try:
                    await update.message.reply_document(
                        document=open(file_path, 'rb'),
                        caption=f"–§–∞–π–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {os.path.basename(file_path)}"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            else:
                print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
    if update.callback_query:
        await update.callback_query.edit_message_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:\n\n{order_summary}")
    elif update.message:
        await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:\n\n{order_summary}")

    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–º–µ–Ω—é"
async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text.lower()

    if text == "–º–µ–Ω—é":
        await main_menu(update, context)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ \"–º–µ–Ω—é\", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")

def main() -> None:
    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', main_menu))
    application.add_handler(CommandHandler('menu', main_menu))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /menu



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(about_company, pattern='^about$'))
    application.add_handler(CallbackQueryHandler(gallery, pattern='^gallery$'))
    application.add_handler(CallbackQueryHandler(feedback, pattern='^feedback$'))
    application.add_handler(CallbackQueryHandler(order_status, pattern='^status$'))
    application.add_handler(CallbackQueryHandler(faq, pattern='^faq$'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))
    application.add_handler(CallbackQueryHandler(handle_photo_navigation, pattern='^(prev_photo|next_photo|back_to_main)$'))

    order_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_order, pattern="^order$")],
        states={
            CATEGORY: [CallbackQueryHandler(choose_subcategory)],
            SUBCATEGORY: [
                CallbackQueryHandler(ask_size, pattern="^(?!back_to_category|other_subcategory).*$"),
                CallbackQueryHandler(back_to_category, pattern="^back_to_category$"),
                CallbackQueryHandler(handle_other_subcategory, pattern="^other_subcategory$")
            ],
            OTHER_SUBCATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_other_subcategory)],
            CONFIRM_SUBCATEGORY: [
                CallbackQueryHandler(handle_confirm_subcategory, pattern="^(rewrite_subcategory|confirm_subcategory)$")
            ],
            SIZE_KNOWN: [CallbackQueryHandler(handle_size_known, pattern="^(yes|no|back_to_category)$")],
            LENGTH: [CallbackQueryHandler(handle_length_input, pattern="^length_.*$"), CallbackQueryHandler(back_to_size_known, pattern="^back_to_size_known$")],
            WIDTH: [CallbackQueryHandler(handle_width_input, pattern="^width_.*$"), CallbackQueryHandler(back_to_length, pattern="^back_to_length$")],
            GLASS: [CallbackQueryHandler(ask_color, pattern="^(?!back_to_size_known).*$"), CallbackQueryHandler(back_to_size_known, pattern="^back_to_size_known$")],
            COLOR: [
                CallbackQueryHandler(handle_color_selection, pattern="^(?!back_to_glass|upload|skip|other_color).*$"),
                CallbackQueryHandler(back_to_glass, pattern="^back_to_glass$"),
                CallbackQueryHandler(handle_other_color, pattern="^other_color$")
            ],
            OTHER_COLOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_other_color)],
            CONFIRM_COLOR: [
                CallbackQueryHandler(handle_confirm_color, pattern="^(rewrite_color|confirm_color)$")
            ],
            VISUAL: [
                CallbackQueryHandler(handle_visual_selection, pattern="^(upload|skip)$"),
                MessageHandler(filters.PHOTO | filters.Document.ALL, upload_visual),
                CallbackQueryHandler(finish_visual, pattern="^next$")
            ],
            SOURCE: [
                CallbackQueryHandler(complete_order, pattern="^(?!back_to_visual|other_source).*$"),
                CallbackQueryHandler(back_to_visual, pattern="^back_to_visual$"),
                CallbackQueryHandler(handle_other_source, pattern="^other_source$")
            ],
            OTHER_SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_other_source)],
            CONFIRM_SOURCE: [
                CallbackQueryHandler(handle_confirm_source, pattern="^(rewrite_source|confirm_source)$")
            ]
        },
        fallbacks=[],
        per_user=True,
        per_message=True 
    )



    application.add_handler(order_handler)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.run_polling()

if __name__ == '__main__':
    main()
